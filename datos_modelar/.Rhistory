next
}
}
} else {
noisy_countries <- c()
for(i in 1:nrow(df)) {
if(sum(is.na(df[i, ])) / ncol(df) > 0.3) {
noisy_countries <- c(noisy_countries, df[i, "country"])
} else {
next
}
}
}
return(noisy_countries)
}
noisy_c <- get_noisy_countries(mydata)
noisy_c
remove_noisy_vars <- function(df) {
cols_pos <- c()
for(i in 1:ncol(df)) {
if(sum(is.na(df[, i])) / nrow(df) > 0.30) {
cols_pos <- c(cols_pos, i)
} else {
next
}
}
return(cols_pos)
}
cols_pos <- remove_noisy_vars(mydata)
mydata <- mydata[, -cols_pos]
noisy_c <- get_noisy_countries(mydata)
noisy_c
library(VIM)
aggr_plot <- aggr(mydata, col=c('navyblue','red'), numbers=TRUE, sortVars=TRUE, labels=names(mydata), cex.axis=.7, gap=3, ylab=c("Histogram of missing data","Pattern"))
mydata_numeric <-  data.frame(sapply(mydata[ , -c(1,2)], as.numeric))
mydata_df <- mydata_numeric
mydata_df$country <- countries_and_codes_total$country[countries_and_codes_total$country_code %in% mydata$country_code]
countries_and_codes_total$country[countries_and_codes_total$country_code %in% mydata$country_code]
countries_and_codes_total[duplicated(countries_and_codes_total$country_code)]
countries_and_codes_total[duplicated(countries_and_codes_total$country_code), ]
Country_Name_correct<- c("Antigua and Barbuda"="Antigua",
"Bahamas, The"="Bahamas",
"Brunei Darussalam"="Brunei",
"Cabo Verde"="Cape Verde",
"Congo, Dem. Rep."="Democratic Republic of the Congo",
"Congo, Rep."="Republic of Congo",
"Cote d'Ivoire"="Ivory Coast",
"Egypt, Arab Rep."="Egypt",
"Faeroe Islands"="Faroe Islands",
"Gambia, The"="Gambia",
"Iran, Islamic Rep."="Iran",
"Korea, Dem. Rep."="North Korea",
"Korea, Rep."="South Korea",
"Korea, Republic"="South Korea",
"Republic of Korea"="South Korea",
"Kyrgyz Republic"="Kyrgyzstan",
"Lao PDR"="Laos",
"Macedonia, FYR"="Macedonia, Federal States of",
"Micronesia, Fed. Sts."="Micronesia, Federal States of",
"Russian Federation"="Russia",
"Slovak Republic"="Slovakia",
"St. Lucia"="Saint Lucia",
"St. Martin (French part)"="Saint Martin",
"St. Vincent and the Grenadines"="Saint Vincent",
"Saint Vincent and the Grenadines"="Saint Vincent",
"Syrian Arab Republic"="Syria",
"Trinidad and Tobago"="Trinidad",
"United Kingdom"="UK",
"United States"="USA",
"United States of America" = "USA",
"Venezuela, RB"="Venezuela",
"Virgin Islands (U.S.)"="Virgin Islands",
"United States Virgin Islands"="US Virgin Islands",
"Yemen, Rep."="Yemen",
"Sint Maarten (Dutch part)"="Sint Maarten",
"West Bank and Gaza"="Palestine",
"The former Yugoslav Republic of Macedonia" = "Macedonia",
"Democratic People's Republic of Korea"="North Korea",
"Bolivia (Plurinational State of)"="Bolivia",
"Lao People's Democratic Republic"="Laos",
"Micronesia (Federated States of)"="Micronesia, Federal States of",
"Venezuela (Bolivarian Republic of)"="Venezuela",
"State of Palestine" = "Palestine",
"China, Hong Kong SAR"="Hong Kong",
"China, Macao SAR" = "Macao SAR, China",
"Iran (Islamic Republic of)"="Iran",
"Korea, Dem. People's Rep."="North Korea",
"United Republic of Tanzania"="Tanzania",
"Republic of Moldova"="Moldova",
"Viet Nam" = "Vietnam",
"Virgin Islands"="US Virgin Islands",
"Hong Kong SAR"="Hong Kong",
"Micronesia" = "Micronesia, Federal States of",
"Czech Republic" = "Czechia",
"Macao" = "Macao SAR, China",
"Congo" = "Republic of Congo",
"Saint Kitts and Nevis"="St. Kitts and Nevis",
"Swaziland"="Eswatini")
correct_names <- function(df, correct_list = Country_Name_correct) {
df2 <- df
for (c in names(Country_Name_correct) ) {
df2[df2$country==c,"country"] <-  Country_Name_correct[c]
}
return(df2)
}
add_code_absent <- function(df, countries = c("Eswatini", "Micronesia"), codes = c("SWZ", "FSM")) { #estos dos países nos dan fallos al meterles el código, así que usaremos la información de: https://www.iso.org/obp/ui/#iso:code:3166:SZ
for(i in 1:length(countries)) {
df[df$country == countries[i], "country_code"] <- codes[i]
}
return(df)
}
if(!require(countrycode)) {
install.packages("countrycode")
}
library(countrycode)
country_profile_vars <- read.csv("country_profile_variables.csv", sep = ",", fileEncoding = "utf-8", stringsAsFactors = F)
country_profile_vars <- correct_names(country_profile_vars)
country_profile_vars$country_code <- countrycode(country_profile_vars$country, "country.name", "iso3c")
country_profile_vars <- add_code_absent(country_profile_vars)
country_profile_vars <- country_profile_vars[!is.na(country_profile_vars$country_code), ]
countries_and_codes_total <- country_profile_vars[!duplicated(country_profile_vars$country_code) , c("country", "country_code")]
internet_usage <- country_profile_vars[ , c("country", "country_code", "Individuals.using.the.Internet..per.100.inhabitants.")]
names(internet_usage) <- c("country", "country_code","internet_usage")
internet_usage[internet_usage$internet_usage == -99, "internet_usage"] <- NA
internet_usage <- correct_names(internet_usage)
mobile_cellular_subscriptions <- country_profile_vars[ , c("country" ,"country_code", "Mobile.cellular.subscriptions..per.100.inhabitants.")]
names(mobile_cellular_subscriptions) <-  c("country", "country_code","cell_subscr")
mobile_cellular_subscriptions$cell_subscr[mobile_cellular_subscriptions$cell_subscr == -99 | mobile_cellular_subscriptions$cell_subscr == "..."] <- NA
#mobile_cellular_subscriptions[mobile_cellular_subscriptions$country %in% inf_mort_rate$country, ]
mobile_cellular_subscriptions <- correct_names(mobile_cellular_subscriptions)
internet_usage$country <- NULL
mobile_cellular_subscriptions$country <- NULL
mydata <- merge(internet_usage, mobile_cellular_subscriptions, on = "country_code", all = T)
gdp <- data.frame(country_profile_vars$country, country_profile_vars$country_code ,country_profile_vars$GDP..Gross.domestic.product..million.current.US..)
names(gdp) <- c("country","country_code", "gdp")
gdp$gdp[gdp$gdp == -99 | gdp$gdp == "..."] <- NA
gdp <- gdp[!is.na(gdp$country), ]
gdp$country <- as.character(gdp$country)
gdp <- correct_names(gdp)
gdp$country <- NULL
mydata <- merge(mydata, gdp, on = "country_code", all = T)
library(readr)
worldbankdata <- read_csv("worldbank1.csv")
worldbankdata <- worldbankdata[ , c("Country Name", "GDP per capita (Current US$)", "Labor force, female (% of total labor force)",  "Inflation, consumer prices (annual %)", "GNI per capita, Atlas method (current US$)", "Maternity leave (days paid)", "Ratio of female to male labor force participation rate (%) (modeled ILO estimate)", "Contributing family workers, female (% of female employment) (modeled ILO estimate)")]
names(worldbankdata) <- c("country", "gdp_per_cap", "lab_force_fem", "inflation", "gni_per_cap", "matern_leave", "fem_to_male_part_rate", "contr_fam_workers")
worldbankdata[worldbankdata == ".."] <-  NA
worldbankdata <- correct_names(worldbankdata)
worldbankdata$country_code <- countrycode(worldbankdata$country, "country.name", "iso3c")
worldbankdata <- add_code_absent(worldbankdata)
worldbankdata <- worldbankdata[!is.na(worldbankdata$country_code), ]
worldbankdata <- data.frame(worldbankdata)
worldbankdata[ , 2:8] <- apply(worldbankdata[ , 2:8], 2, as.numeric)
worldbankdata$country <- NULL
mydata <- merge(mydata, worldbankdata, on = "country_code", all = T)
balance_of_payments <- country_profile_vars[ , c("country", "country_code","Balance.of.payments..current.account..million.US..")]
names(balance_of_payments) <- c("country","country_code", "BoP")
balance_of_payments$BoP[balance_of_payments$BoP == -99 | balance_of_payments$BoP == "..."] <- NA
balance_of_payments <- correct_names(balance_of_payments)
balance_of_payments$country <- NULL
mydata <- merge(mydata, balance_of_payments, on = "country_code", all = T)
urban_pop <- country_profile_vars[, c("country", "country_code","Urban.population....of.total.population.")]
names(urban_pop) <- c("country", "country_code","urban_p")
urban_pop$urban_p[urban_pop$urban_p == -99 | urban_pop$urban_p == ".."] <- NA
urban_pop <- correct_names(urban_pop)
urban_pop$country <- NULL
mydata <- merge(mydata, urban_pop, on = "country_code", all = T)
refugees <- country_profile_vars[ , c("country", "country_code","Refugees.and.others.of.concern.to.UNHCR..in.thousands." )]
names(refugees) <- c("country", "country_code","refugees")
refugees$refugees[refugees$refugees == -99 | refugees$refugees  == ".."] <- NA
refugees <- correct_names(refugees)
refugees[refugees == "~0.0"] <- NA
refugees$country <- NULL
mydata <- merge(mydata,refugees, on = "country_code", all = T)
gini_index <- read_csv("gini_index.csv")
names(gini_index)
country_and_code <- gini_index[ , c("Country Name", "Country Code")]
names(country_and_code) <- c("country", "country_code")
gini_index<- gini_index[ ,9:ncol(gini_index)]
gini_index <- apply(gini_index, 2, as.numeric)
gini_index$mean <- rowMeans(gini_index, na.rm = T)
gini_index <- data.frame(cbind(country_and_code, gini_index$mean))
names(gini_index) <- c("country", "country_code", "gini_index")
gini_index <- correct_names(gini_index)
gini_index$country <- NULL
mydata <- merge(mydata, gini_index, on = "country_code", all = T)
health <- country_profile_vars[, c("country", "country_code","Health..Total.expenditure....of.GDP.")]
names(health) <- c("country", "country_code","health")
health$health[health$health == -99 | health$health  == ".."] <- NA
health <- correct_names(health)
health$country <- NULL
mydata <- merge(mydata,health, on = "country_code", all = T)
education <- country_profile_vars[ , c("country", "country_code","Education..Government.expenditure....of.GDP.")]
names(education) <- c("country", "country_code","education")
education$education[education$education == -99 | education$education  == ".." | education$education  == "..."] <- NA
education <- correct_names(education)
education$country <- NULL
mydata <- merge(mydata,education, on = "country_code", all = T)
co2 <- country_profile_vars[ , c("country", "country_code","CO2.emission.estimates..million.tons.tons.per.capita.")]
names(co2) <- c("country", "country_code","co2")
co2$co2[co2$co2 == -99 | co2$co2  == ".."] <- NA
co2 <- correct_names(co2)
co2$country <- NULL
mydata <- merge(mydata,co2, on = "country_code", all = T)
productivity <- read_csv("productivity_wb.csv") #as measured by GDP per person employed.
productivity <- productivity[ , c(3, 4, 5)]
names(productivity) <- c("country", "country_code", "productivity")
productivity$productivity[productivity$productivity == -99 | productivity$productivity == ".."] <- NA
productivity <- correct_names(productivity)
productivity <- add_code_absent(productivity)
productivity$country <- NULL
mydata <- merge(mydata, productivity, on = "country_code", all = T)
innovation_and_fin_health <- read_csv("innovation_and_debt.csv")
head(innovation_and_fin_health)
innovation_and_fin_health <- innovation_and_fin_health[ , 3:ncol(innovation_and_fin_health)]
names(innovation_and_fin_health) <- c("country", "country_code", "sci_jour", "patent_nr", "patent_r", "trademark app", "hightech_exp", "int_prop", "credit_inf", "food_deficit", "imf_charges", "int_forgiven")
innovation_and_fin_health[innovation_and_fin_health == ".." | innovation_and_fin_health == -99] <- NA
innovation_and_fin_health <- correct_names(innovation_and_fin_health)
innovation_and_fin_health <- add_code_absent(innovation_and_fin_health)
innovation_and_fin_health$country <- NULL
mydata <- merge(mydata, innovation_and_fin_health, on = "country_code", all = T)
renewable_energy <- read_csv("renewable_energy.csv")
renewable_energy <- renewable_energy[ , 3:ncol(renewable_energy)]
names(renewable_energy) <- c("country", "country_code", "renew_en_%", "renew_electr")
renewable_energy <- correct_names(renewable_energy)
renewable_energy <- add_code_absent(renewable_energy)
renewable_energy$country <- NULL
mydata <- merge(mydata, renewable_energy, on = "country_code", all = T)
library(WHO)
library(rgho)
library(plyr)
library(dplyr)
require(tidyr)
infant_mortality_rate <- data.frame(get_data("MDG_0000000001"))
inf_mort_rate <-  infant_mortality_rate %>%
group_by(country) %>%
group_by(year, add = T) %>%
filter(year >= 2010) %>%
select(country, value) %>%
filter(!is.na(country)) %>%
spread(year, value)
inf_mort_rate$inf_mort_rate <- inf_mort_rate$`2017`
inf_mort_rate <- inf_mort_rate[ , c("country", "inf_mort_rate")]
inf_mort_rate <- correct_names(inf_mort_rate)
inf_mort_rate$country_code <- countrycode(inf_mort_rate$country, "country.name", "iso3c")
inf_mort_rate <- add_code_absent(inf_mort_rate)
sanitation_services <- read.csv("sanitation_services.csv")
names(sanitation_services) <- c("country", "sanitation_services")
sanitation_services <- sanitation_services[!is.na(sanitation_services$country), ]
sanitation_services$country <- as.character(sanitation_services$country)
sanitation_services <- correct_names(sanitation_services)
sanitation_services$country_code <- countrycode(sanitation_services$country, "country.name", "iso3c")
sanitation_services <- add_code_absent(sanitation_services)
inf_mort_rate$country <- NULL
sanitation_services <- NULL
who_df <- merge(inf_mort_rate, sanitation_services, on = "country_code", all = T)
deaths_for_household_pollution <- read.csv("deaths_for_household_pollution.csv", sep = ",", fileEncoding = "utf-8", stringsAsFactors = F)
deaths_for_household_pollution$Value <- as.numeric(gsub(' .*', "", deaths_for_household_pollution$Value))
deaths_for_household_pollution <- deaths_for_household_pollution[deaths_for_household_pollution$Cause == "Total", ]
names(deaths_for_household_pollution) <- c("country", "cause", "deaths_household_pollution")
deaths_for_household_pollution$cause <- NULL
deaths_for_household_pollution <- deaths_for_household_pollution[!is.na(deaths_for_household_pollution$country), ]
deaths_for_household_pollution <- correct_names(deaths_for_household_pollution)
deaths_for_household_pollution$country_code <- countrycode(deaths_for_household_pollution$country, "country.name", "iso3c")
deaths_for_household_pollution <- add_code_absent(deaths_for_household_pollution)
deaths_for_household_pollution$country <- NULL
who_df <- merge(who_df, deaths_for_household_pollution, on = "country_code", all = T)
water <- read.csv("water.csv", stringsAsFactors = F)
names(water) <- c("country", "water")
water <- water[!is.na(water$country), ]
water <- correct_names(water)
water$country_code <- countrycode(water$country, "country.name", "iso3c")
water <- add_code_absent(water)
water$country <- NULL
who_df <- merge(who_df, water, on = "country_code", all = T)
require(tidyr)
library(plyr)
require(dplyr)
energy_wb <- read_csv("energy_wb.csv")
energy_wb <- energy_wb[1:460, c(1, 3:6)]
names(energy_wb) <- c("year", "country", "country_code", "electricity", "clean_fuels")
library(data.table) ## v >= 1.9.6
energy_wb <- dcast(setDT(energy_wb), country ~ year, value.var = c("electricity", "clean_fuels"))
energy_wb[energy_wb == ".." | energy_wb == -99] <- NA
energy_new <- data.frame(energy_wb)
for(column in c("electricity", "clean_fuels")) {
nombre_real <- paste0(column, "_2016")
for (i in 1:nrow(energy_wb)) {
if(is.na(energy_new[i, nombre_real])) {
if(!is.na(energy_new[i, paste0(column, "_2015")])) {
energy_new[i, nombre_real] <- energy_new[i, paste0(column, "_2015")]
} else {
next
}
}
}
}
energy_wb <- correct_names(energy_wb)
energy_new$country_code <- countrycode(energy_new$country, "country.name", "iso3c")
energy_new <- add_code_absent(energy_new)
energy_new <- energy_new[!is.na(energy_new$country_code), ]
energy_new$electricity_2015 <- NULL
energy_new$clean_fuels_2015 <- NULL
energy_new$country <- NULL
mydata <- merge(mydata, energy_new, on = "country_code", all = T)
mydata <- merge(mydata, who_df, on = "country_code", all = T)
#codes_and_countries <- mydata[ , c("country", "country_code")]
#mydata$country_code <- NULL
additional_un_vars <- country_profile_vars[ , c("country_code", "Fertility.rate..total..live.births.per.woman.", "Life.expectancy.at.birth..females.males..years.", "Urban.population.growth.rate..average.annual...", "International.trade..Balance..million.US..", "Employment..Agriculture....of.employed.", "Economy..Agriculture....of.GVA.", "Economy..Industry....of.GVA.")]
additional_un_vars[additional_un_vars== ".." | additional_un_vars == "..." | additional_un_vars == -99 | additional_un_vars == ".../..."] <- NA
names(additional_un_vars) <- c("country_code", "fert_rate", "life_exp", "urban_pop_growth", "int_tr_bal", "emp_agr", "eco_agr", "eco_ind")
life_exp <- c()
for (i in 1:nrow(additional_un_vars)) {
if(!is.na(additional_un_vars[i, "life_exp"])) {
fem <- as.numeric(gsub("/.*", "", additional_un_vars[i, "life_exp"]))
mas <- as.numeric(gsub(".*/", "", additional_un_vars[i, "life_exp"]))
media <- (fem + mas) / 2
life_exp <- c(life_exp, media)
} else {
life_exp <- c(life_exp, NA)
}
}
additional_un_vars$life_exp <- life_exp
mydata <- merge(mydata, additional_un_vars, on = "country_code", all = T)
vulner_empl <- read_csv("vulnerable_employment.csv")
vulner_empl <- vulner_empl[1:217 , 3:ncol(vulner_empl)]
names(vulner_empl) <- c("country", "country_code", "vulner_empl")
vulner_empl[vulner_empl == ".." | vulner_empl == -99] <- NA
vulner_empl$country <- NULL
mydata <- merge(mydata, vulner_empl, on = "country_code", all = T)
prop_miss <- function(x){sum(is.na(x))/length(x)*100}
apply(mydata,2,prop_miss)
apply(mydata,1,prop_miss)
get_noisy_countries <- function(df) {
require(lava)
if ("country" %ni% names(df)) {
noisy_countries <- c()
for(i in 1:nrow(df)) {
if(sum(is.na(df[i, ])) / ncol(df) > 0.3) {
noisy_countries <- c(noisy_countries, df[i, "country_code"])
} else {
next
}
}
} else {
noisy_countries <- c()
for(i in 1:nrow(df)) {
if(sum(is.na(df[i, ])) / ncol(df) > 0.3) {
noisy_countries <- c(noisy_countries, df[i, "country"])
} else {
next
}
}
}
return(noisy_countries)
}
noisy_c <- get_noisy_countries(mydata)
noisy_c
remove_noisy_vars <- function(df) {
cols_pos <- c()
for(i in 1:ncol(df)) {
if(sum(is.na(df[, i])) / nrow(df) > 0.30) {
cols_pos <- c(cols_pos, i)
} else {
next
}
}
return(cols_pos)
}
cols_pos <- remove_noisy_vars(mydata)
mydata <- mydata[, -cols_pos]
noisy_c <- get_noisy_countries(mydata)
noisy_c
library(VIM)
aggr_plot <- aggr(mydata, col=c('navyblue','red'), numbers=TRUE, sortVars=TRUE, labels=names(mydata), cex.axis=.7, gap=3, ylab=c("Histogram of missing data","Pattern"))
mydata_df <- mydata
mydata_numeric <-  data.frame(sapply(mydata[ , -c(1,2)], as.numeric))
mydata_df$country <- countries_and_codes_total$country[countries_and_codes_total$country_code %in% mydata$country_code]
mydata_df[duplicated(mydata_df$), ]
mydata_df[duplicated(mydata_df$country_code), ]
mydata_df[duplicated(mydata_df$country_code), "country"]
mydata_df[duplicated(mydata_df$country_code), "country_code"]
library(VIM)
aggr_plot <- aggr(mydata, col=c('navyblue','red'), numbers=TRUE, sortVars=TRUE, labels=names(mydata), cex.axis=.7, gap=3, ylab=c("Histogram of missing data","Pattern"))
mydata_df <- mydata
mydata_numeric <-  data.frame(sapply(mydata[ , -c(1,2)], as.numeric))
mydata_df <- mydata_df[!duplicated(mydata_df$country_code), ]
library(VIM)
aggr_plot <- aggr(mydata, col=c('navyblue','red'), numbers=TRUE, sortVars=TRUE, labels=names(mydata), cex.axis=.7, gap=3, ylab=c("Histogram of missing data","Pattern"))
mydata_df <- mydata
mydata_numeric <-  data.frame(sapply(mydata[ , -c(1,2)], as.numeric))
mydata_df <- mydata_df[!duplicated(mydata_df$country_code), ]
require(lava)
mydata2 <- mydata_df[mydata_df$country %ni% noisy_c, ]
aggr_plot <- aggr(mydata2, col=c('navyblue','red'), numbers=TRUE, sortVars=TRUE, labels=names(mydata), cex.axis=.7, gap=3, ylab=c("Histogram of missing data","Pattern"))
mydata2$internet_usage <- NULL
mydata2$matern_leave <- NULL
mydata2$gdp <- NULL
mydata2$BoP <- NULL
#mydata2$cell_subscr <- NULL
mydata2$contr_fam_workers <- NULL
mydata2$refugees <- NULL
#mydata2$health <- NULL
mydata2$education <- NULL
#mydata2$co2 <- NULL
#mydata2$renew_electr <- NULL
mydata2$int_forgiven <- NULL
mydata2$imf_charges <- NULL
mydata2$int_prop <- NULL
mydata2$food_deficit <- NULL
mydata2$patent_nr <- NULL
mydata2$patent_r <- NULL
#mydata2$sci_jour <- NULL
mydata2$trademark.app <- NULL
mydata2$hightech_exp <- NULL
mydata2$int_tr_bal <- NULL
mydata2$eco_ind <- NULL
mydata2$fem_to_male_part_rate <- NULL
mydata2$lab_force_fem <- NULL
mydata2$co2 <- NULL
mydata2$health <- NULL
mydata2$sci_jour <- NULL
mydata2$cell_subscr <- NULL
if(!require(mice)) {
install.packages("mice")
}
countries_and_regions <- country_profile_vars[ , c("country_code", "Region")]
names(countries_and_regions) <- c("country_code", "region")
mydata2 <- merge(mydata2, countries_and_regions, on = "country_code", all.x = T)
mydata2$region <- as.factor(mydata2$region)
mydata2$country_code <- NULL
countries <- mydata2$country
mydata2$country <- NULL
mydata_imputed <- mice(mydata2, m=1, method='rf', printFlag=FALSE)
View(mydata2)
mydata_imputed <- mice(mydata2, m=1, method='rf', printFlag=FALSE)
names(mydata2)
View(mydata2)
mice(mydata2, m=1, method='rf', printFlag=FALSE)
mydata_imputed <- mice(mydata2, m=1, method='cart', printFlag=FALSE)
df <-  fread('Modelar_UH2019.txt', encoding = 'Latin-1')
library(doParallel)
library(data.table)
require(caretEnsemble)
setwd("~/cajamar2/EquipoGamma/datos_modelar")
library(data.table)
d_or <- fread('../datos_originales/Modelar_UH2019.txt', encoding = 'utf-8')
library(data.table)
d_or <- fread('../datos_originales/Modelar_UH2019.txt', encoding = 'UTF-8')
library(dplyr)
imagenes <- fread('../datos_originales/numero_imagenes.csv')
d_or <- left_join(d_or, imagenes, by = HY_id)
d_or <- left_join(d_or, imagenes, by = 'HY_id')
require(ggplot2)
d_or %>%
ggplot(aes(x = conteo, y = TARGET)) +
geom_point()
d_or %>%
ggplot(aes(x = log1p(conteo), y = TARGET)) +
geom_point()
d_or %>%
ggplot(aes(x = conteo, y = log1p(TARGET))) +
geom_point(alpha = 0.5)
d_or %>%
ggplot(aes(x = conteo, y = TARGET)) +
geom_point(alpha = 0.5)
d_or %>%
group_by(conteo) %>%
summarise(target = mean(TARGET))
points(.Last.value)
d_or %>%
group_by(conteo) %>%
summarise(target = mean(TARGET)) %>%
ggplot(aes(x = conteo, y = target)) +
geom_bar(stat = "identity") +
coord_flip()
d_or %>%
group_by(conteo) %>%
filter(HY_provincia == "Madrid") %>%
summarise(target = mean(TARGET)) %>%
ggplot(aes(x = conteo, y = target)) +
geom_bar(stat = "identity") +
coord_flip()
d_or %>%
group_by(conteo) %>%
filter(HY_provincia == "Madrid") %>%
summarise(target = mean(TARGET), num = n()) %>%
ggplot(aes(x = conteo, y = target)) +
geom_bar(stat = "identity") +
coord_flip()
d_or %>%
group_by(conteo) %>%
filter(HY_provincia == "Madrid") %>%
summarise(target = mean(TARGET), num = n())
d_or %>%
group_by(conteo) %>%
summarise(target = mean(TARGET), num = n())
library(GGally)
ggcorr(d_or)
limpiar <- function(df = d_or) {
categoricas <- df[, c("HY_provincia", "HY_tipo")]
df[, c("HY_provincia", "HY_tipo")] <- NULL
categoricas_dummy <- one_hot(as.data.table(categoricas))
categoricas_dummy <- data.frame(categoricas_dummy)
rellenar_metros <- df %>%
group_by(HY_provincia, HY_tipo) %>%
summarise(metros = median(HY_metros_totales, na.rm=T))
for(i in 1:nrow(df)) {
if(is.na(df$HY_metros_totales[i])) {
value <- rellenar_metros[rellenar_metros$HY_provincia == d]
}
}
}
